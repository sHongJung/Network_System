#include "prclient.h"
#include "prclient.p"

void error(const char *msg)
{
	perror(msg);
	exit(0);
}

int main(int argc, char *argv[]){
	int sockfd, portno, n;
	struct sockaddr_in serv_addr;
	struct hostent *server;
	char buffer[3072];
	int rcv_buf=5000, snd_buf=5000;
	socklen_t len;

	int prc_num, ip_num;
	IPaddr *ipaddr;
	Process *process;

	if (argc < 2) {
		fprintf(stderr,"usage %s hostname port\n", argv[0]);
		exit(0);
	}
	portno = atoi(argv[1]);
	sockfd = socket(AF_INET, SOCK_STREAM, 0);

	if (sockfd < 0)
		error("ERROR opening socket");

	snd_buf = 5000;
	if(setsockopt(sockfd, SOL_SOCKET, SO_SNDBUF, &snd_buf,sizeof(snd_buf)))
	{
		error("SET error");
	}


	server = gethostbyname("192.168.70.239");
//	server = gethostbyname(argv[1]);

	if (server == NULL) {
		fprintf(stderr,"ERROR, no such host\n");
		exit(0);
	}

	bzero((char *) &serv_addr, sizeof(serv_addr));
	serv_addr.sin_family = AF_INET;
	bcopy((char *)server->h_addr, (char *)&serv_addr.sin_addr.s_addr, server->h_length);
	serv_addr.sin_port = htons(portno);

	if (connect(sockfd,(struct sockaddr *) &serv_addr,sizeof(serv_addr)) < 0)
		error("ERROR connecting");

	len=sizeof(snd_buf);
	if(getsockopt(sockfd, SOL_SOCKET, SO_SNDBUF, &snd_buf, &len))
		error("GET_SOCK Error");
	len=sizeof(rcv_buf);
	if(getsockopt(sockfd, SOL_SOCKET, SO_RCVBUF, &rcv_buf, &len))
		error("GET_SOCK Error");
	printf("RCV Socket buffer size: %d\n", rcv_buf);
	printf("SND Socket buffer size: %d\n", snd_buf);
	
	while(1)
	{	
		memset(buffer, 0x00, sizeof(buffer));

		server = gethostbyname(argv[1]);

		if (server == NULL) {
			fprintf(stderr,"ERROR, no such host\n");
			exit(0);
		}
		//클라이언트 IP와 프로세스 내용을 저장할 파일 생성
		GetIPinfo();

		//프로세스 내용을 파일에 추가
		PrcFileGen();

		//ip 주소 갯수 파악
		ip_num = IpCount();

		//실행중인 프로세스 갯수 파악
		prc_num = PrcCount();

		ipaddr = (IPaddr *)malloc(ip_num * sizeof(IPaddr));
		process = (Process *)malloc(prc_num * sizeof(Process));

		//클라이언트 주소와 프로세스 구조체에 파일의 내용을 입력하고 화면에 출력	
		PrcInfoGet(ipaddr, portno, process, ip_num, prc_num);
			
		memcpy(buffer, process,sizeof(process));
			
		n = write(sockfd, buffer, sizeof(buffer));
		if(n<0)
			error("ERROR writing to socket");

		fprintf(stdout,"%d bytes sending\n",n);
		//		n = read(sockfd,buffer,3072);
		//		if (n < 0) 
		//			error("ERROR reading from socket");
		//		printf("%s\n",buffer);

		sleep(5);
	}
	close(sockfd);
	return 0;
}
